datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma-types"
}

model Todo {
  id          String   @id @default(uuid())
  /// @zod.string.min(3, { message: "Must be at least 3 characters." }).max(20, { message: "Must be at most 20 characters" })
  title       String
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model User {
// DO NOT EDIT BELOW, USED FOR AUTHENTICATION  
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
// DO NOT EDIT ABOVE, USED FOR AUTHENTICATION
  
  reviews       Review[]
}

model Client {
  id            String    @id @default(cuid())
  name          String
  company          String
  email         String
  phone         String
  address       String
  city          String
  state         String
  zip           String
  country       String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  reviews       Review[]
}

model Review {
  id              String             @id @default(cuid())
  userId          String
  clientId        String
  bankTypeId      String
  transactions    Transaction[]
  bankStatements  BankStatement[]
  user            User            @relation(fields: [userId], references: [id])
  client          Client          @relation(fields: [clientId], references: [id])
  bankType        BankType        @relation(fields: [bankTypeId], references: [id])
}

model Transaction {
  id          String       @id @default(cuid())
  date        DateTime
  description String
  amount      Float
  reviewId    String
  categoryId  String
  review      Review    @relation(fields: [reviewId], references: [id])
  category    Category  @relation(fields: [categoryId], references: [id])
}


model BankType {
  id      String      @id @default(cuid())
  name    String
  reviews Review[]
}

model BankStatement {
  id       String     @id @default(cuid())
  reviewId String
  name     String
  file     Bytes    // This field will store the binary data of the file
  review   Review  @relation(fields: [reviewId], references: [id])
}

model Category {
  id           String           @id @default(cuid())
  name         String
  transactions Transaction[]
}

// DO NOT EDIT BELOW, USED FOR AUTHENTICATION
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
